// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: cars.proto

package cars

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarClient is the client API for Car service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarClient interface {
	GetUserCars(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*CarsResponse, error)
	GetUserEngines(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*EnginesResponse, error)
	GetCarEngines(ctx context.Context, in *CarIdRequest, opts ...grpc.CallOption) (*EnginesResponse, error)
	GetEngines(ctx context.Context, in *CarLabelRequest, opts ...grpc.CallOption) (*EnginesResponse, error)
}

type carClient struct {
	cc grpc.ClientConnInterface
}

func NewCarClient(cc grpc.ClientConnInterface) CarClient {
	return &carClient{cc}
}

func (c *carClient) GetUserCars(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*CarsResponse, error) {
	out := new(CarsResponse)
	err := c.cc.Invoke(ctx, "/cars.Car/GetUserCars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) GetUserEngines(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*EnginesResponse, error) {
	out := new(EnginesResponse)
	err := c.cc.Invoke(ctx, "/cars.Car/GetUserEngines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) GetCarEngines(ctx context.Context, in *CarIdRequest, opts ...grpc.CallOption) (*EnginesResponse, error) {
	out := new(EnginesResponse)
	err := c.cc.Invoke(ctx, "/cars.Car/GetCarEngines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) GetEngines(ctx context.Context, in *CarLabelRequest, opts ...grpc.CallOption) (*EnginesResponse, error) {
	out := new(EnginesResponse)
	err := c.cc.Invoke(ctx, "/cars.Car/GetEngines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServer is the server API for Car service.
// All implementations must embed UnimplementedCarServer
// for forward compatibility
type CarServer interface {
	GetUserCars(context.Context, *UserRequest) (*CarsResponse, error)
	GetUserEngines(context.Context, *UserRequest) (*EnginesResponse, error)
	GetCarEngines(context.Context, *CarIdRequest) (*EnginesResponse, error)
	GetEngines(context.Context, *CarLabelRequest) (*EnginesResponse, error)
	mustEmbedUnimplementedCarServer()
}

// UnimplementedCarServer must be embedded to have forward compatible implementations.
type UnimplementedCarServer struct {
}

func (UnimplementedCarServer) GetUserCars(context.Context, *UserRequest) (*CarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCars not implemented")
}
func (UnimplementedCarServer) GetUserEngines(context.Context, *UserRequest) (*EnginesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEngines not implemented")
}
func (UnimplementedCarServer) GetCarEngines(context.Context, *CarIdRequest) (*EnginesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarEngines not implemented")
}
func (UnimplementedCarServer) GetEngines(context.Context, *CarLabelRequest) (*EnginesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngines not implemented")
}
func (UnimplementedCarServer) mustEmbedUnimplementedCarServer() {}

// UnsafeCarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServer will
// result in compilation errors.
type UnsafeCarServer interface {
	mustEmbedUnimplementedCarServer()
}

func RegisterCarServer(s grpc.ServiceRegistrar, srv CarServer) {
	s.RegisterService(&Car_ServiceDesc, srv)
}

func _Car_GetUserCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).GetUserCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cars.Car/GetUserCars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).GetUserCars(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_GetUserEngines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).GetUserEngines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cars.Car/GetUserEngines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).GetUserEngines(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_GetCarEngines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).GetCarEngines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cars.Car/GetCarEngines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).GetCarEngines(ctx, req.(*CarIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_GetEngines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).GetEngines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cars.Car/GetEngines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).GetEngines(ctx, req.(*CarLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Car_ServiceDesc is the grpc.ServiceDesc for Car service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Car_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cars.Car",
	HandlerType: (*CarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserCars",
			Handler:    _Car_GetUserCars_Handler,
		},
		{
			MethodName: "GetUserEngines",
			Handler:    _Car_GetUserEngines_Handler,
		},
		{
			MethodName: "GetCarEngines",
			Handler:    _Car_GetCarEngines_Handler,
		},
		{
			MethodName: "GetEngines",
			Handler:    _Car_GetEngines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cars.proto",
}
